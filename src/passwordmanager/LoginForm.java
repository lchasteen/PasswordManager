package passwordmanager;
/*
 * LoginForm.java
 *
 * Created on July 6, 2007, 7:43 AM
 */

//,Jimport Connection.SecureConnection;

import SecurityProject.EncryptedFile;
import SecurityProject.EncryptionSecurity;
import SecurityProject.Validation;
import java.awt.Color;
import javax.swing.JFileChooser;




/**
 *
 * @author  lane
 */
public final class LoginForm extends javax.swing.JDialog {
    
    
    /**Creates new form LoginForm. */
    public LoginForm(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, "Login", modal );
        
        // set variables and setup components        
        this.LOGIN_SUCCESSFUL = false;        
        initComponents();
        initGraphicsState();
        this.setLocationRelativeTo(parent);              
        
               
        
        
    }//*************************************************************************
    
    /* 
     * This method is called to show the login dialog box and return if the 
     * login was successful.
     */
    public boolean showLoginDialog(){
        this.setVisible(true);        
        return this.getLoginValidation();        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changeResetBG = new javax.swing.ButtonGroup();
        informationPanel = new javax.swing.JPanel();
        wwidLabel = new javax.swing.JLabel();
        userNameTB = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTB = new javax.swing.JPasswordField();
        newPasswordLabel = new javax.swing.JLabel();
        newPasswordTB = new javax.swing.JPasswordField();
        confirmLabel = new javax.swing.JLabel();
        confirmTB = new javax.swing.JPasswordField();
        newPasswordButton = new javax.swing.JButton();
        changePasswordButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        changePasswordCB = new javax.swing.JCheckBox();
        exitBut = new javax.swing.JButton();
        logInButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        wwidLabel.setText("User Name:");

        passwordLabel.setText("Password:");

        newPasswordLabel.setText("New Password:");

        newPasswordTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordTBActionPerformed(evt);
            }
        });

        confirmLabel.setText("Confirm Password:");

        newPasswordButton.setMnemonic('N');
        newPasswordButton.setText("New");
        newPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordButtonActionPerformed(evt);
            }
        });

        changePasswordButton.setMnemonic('C');
        changePasswordButton.setText("Change");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        selectButton.setMnemonic('F');
        selectButton.setText("Change File");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDataFile(evt);
            }
        });

        changePasswordCB.setMnemonic('h');
        changePasswordCB.setText("Change Password:");
        changePasswordCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        changePasswordCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        changePasswordCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        changePasswordCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordCBActionPerformed(evt);
            }
        });

        exitBut.setMnemonic('x');
        exitBut.setText("Exit");
        exitBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButActionPerformed(evt);
            }
        });

        logInButton.setMnemonic('L');
        logInButton.setText("Log In");
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wwidLabel)
                            .addComponent(passwordLabel)
                            .addComponent(confirmLabel)
                            .addComponent(newPasswordLabel))
                        .addGap(18, 18, 18)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addComponent(newPasswordTB, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addGap(108, 108, 108))
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addComponent(passwordTB, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addGap(108, 108, 108))
                            .addGroup(informationPanelLayout.createSequentialGroup()
                                .addComponent(userNameTB, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addGap(108, 108, 108))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createSequentialGroup()
                                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(informationPanelLayout.createSequentialGroup()
                                        .addComponent(logInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(exitBut, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(confirmTB, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                                .addGap(108, 108, 108)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(changePasswordButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(newPasswordButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createSequentialGroup()
                        .addContainerGap(449, Short.MAX_VALUE)
                        .addComponent(changePasswordCB)))
                .addContainerGap())
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addComponent(userNameTB, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(7, 7, 7)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordTB, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .addComponent(selectButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPasswordTB, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .addComponent(changePasswordButton)
                            .addComponent(newPasswordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirmTB)
                            .addComponent(confirmLabel)
                            .addComponent(newPasswordButton)))
                    .addGroup(informationPanelLayout.createSequentialGroup()
                        .addComponent(wwidLabel)
                        .addGap(13, 13, 13)
                        .addComponent(passwordLabel)))
                .addGap(11, 11, 11)
                .addGroup(informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changePasswordCB)
                    .addComponent(exitBut)
                    .addComponent(logInButton))
                .addContainerGap())
        );

        informationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {changePasswordButton, exitBut, logInButton, newPasswordButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changePasswordCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordCBActionPerformed
            
        if(changePasswordCB.isSelected()){
            
            this.setChangePasswordState();
        } else{
            this.initGraphicsState();            
        }

    }//GEN-LAST:event_changePasswordCBActionPerformed

    private void newPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordButtonActionPerformed
                  
        if(this.newPassword()){            
            this.setLoginValidation(true);
            this.dispose();
        }
        
    }//GEN-LAST:event_newPasswordButtonActionPerformed

    /** This method processes the login.  If the password is a new password then
     * newPassword must be true if not then this is a login request and newPassword
     * must be false. */
    private boolean processLogin(){
        String user, pwd;
        
        pwd = this.getPassword();
        user = this.getUserName();
        // Check to see if user name and password contain values.
        if(!EncryptionSecurity.validateUserName(user) || !EncryptionSecurity.validatePlainText(pwd))return false;     
        
        try{
            // Create the encrypted file.
            this.FILE = new EncryptedFile(this.getFileName());
            // Check to see if this is a new Encryption file if it is then
            // set the new password button and text box to visible and exit.
            if(this.getFile().isNewFile()){
                Validation.pMsg("Program initialization.  Enter your password that you will use for login.");
                this.setNewPasswordState();
                return false;
            }else{
                this.getFile().setUserNamePassword(user, pwd);
            }
                
        }catch (Exception e){            
            Validation.pMsg(e.getMessage());            
            return false;
        }
        
        return true;
        
        
    }//*************************************************************************
    
    /*
     * This method changes the current password if the user name and current password
     * entered matches what is on file.
     */
    public boolean changePassword(){
        
        String newPwd = this.getNewPassword(); 
        String changePwd = this.getConfirm();
        String pwd = this.getPassword();
        String user = this.getUserName();
        
        try {
            // Make sure the user and password match what is on file already.
            if(!EncryptionSecurity.validateChangePassword(pwd, newPwd, changePwd))return false;
            this.FILE = new EncryptedFile(this.getFileName(),user,pwd,changePwd);
        }catch (Exception e){
           Validation.pMsg(e.getMessage());
           return false;
    
        }
        
        Validation.pMsg("Login successful! You have changed your pasword.");
        return true;
    }
    
    /*
     * This method sets validates the new password and sets the new password if
     * it is valid.
     */
    public boolean newPassword(){
       
       String user = this.getUserName();
       String newPwd = this.getNewPassword(); 
       String pwd = this.getPassword();
       try{
           if(!EncryptionSecurity.validateNewPassword(user,pwd,newPwd))return false;
           // Enter your new password.
           this.FILE = new EncryptedFile(this.getFileName(),user,pwd,newPwd,true);
       }catch (Exception e){
           Validation.pMsg(e.getMessage());
           return false;
       }
       
       Validation.pMsg("Login Successful! You have successfully entered a new password.");  
       return true;
    }
    
    private void exitButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButActionPerformed
       this.setLoginValidation(false);
       this.dispose();
    }//GEN-LAST:event_exitButActionPerformed

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButtonActionPerformed
        
        if(this.processLogin()){
            this.setLoginValidation(true);
            this.dispose();
        }
        
        
    }//GEN-LAST:event_logInButtonActionPerformed

    private void selectDataFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDataFile
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        
        int retVal = fc.showOpenDialog(this);
        
        if(retVal == JFileChooser.APPROVE_OPTION){
            this.setFileName(fc.getSelectedFile().getAbsolutePath());
        }
        
        //this.setFileName(fc.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_selectDataFile

    private void newPasswordTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPasswordTBActionPerformed

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        // TODO add your handling code here:
        if(this.changePassword()){
            this.setLoginValidation(true);            
            this.dispose();
        }
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    /*
     * This method sets the file name for the location of encrypted file to read.
     */
    private boolean setFileName(String fileName){
        if(fileName.isEmpty() || fileName.length() < 1)return false;
        this.FILE_NAME = fileName;
        return true;
    }
    
    
    /** This method performs initialization other than the main controls and the form. */
    private boolean initGraphicsState(){
        this.userNameTB.setEditable(true);
        this.logInButton.setEnabled(true);        
        this.confirmTB.setEditable(false);
        //this.confirmLabel.setV(false);        
        this.confirmTB.setEditable(false);        
        //this.newPasswordLabel.setVisible(false);
        this.changePasswordButton.setEnabled(false);
        this.newPasswordTB.setEditable(false);
        this.newPasswordButton.setEnabled(false);
        this.getRootPane().setDefaultButton(this.logInButton);
        return true;
    }//*************************************************************************    
    
    /** This method makes visible the controls for the user to change
    * his or her password.
    */
    private boolean setChangePasswordState(){
        this.userNameTB.setEditable(true);
        this.confirmTB.setEditable(true);
        //this.confirmLabel.setVisible(true);
        //this.newPasswordLabel.setVisible(true);
        this.newPasswordTB.setEditable(true);
        this.changePasswordButton.setEnabled(true);
        this.newPasswordButton.setEnabled(false);
        this.logInButton.setEnabled(false);
        this.confirmTB.setEditable(true);
        this.getRootPane().setDefaultButton(this.changePasswordButton);
        return true;
    }//*************************************************************************    
    
    /** This method makes visible the controls for the user to enter a new
    * password.
    */
    private boolean setNewPasswordState(){
        this.userNameTB.setEditable(false);
        this.confirmTB.setEditable(false);
        //this.confirmLabel.setVisibl(false);
        this.newPasswordButton.setEnabled(true);
        //this.newPasswordLabel.setVisible(true);
        this.newPasswordTB.setEditable(true);        
        this.changePasswordButton.setEnabled(false);
        this.logInButton.setEnabled(false);        
        this.changePasswordCB.setEnabled(false);
        this.getRootPane().setDefaultButton(this.newPasswordButton);
        return true;
    }//*************************************************************************    
    
    
    /** This method compares the new password and the confirmation password to
     * to see if they are the same and returns true if they are and false if not. */     
    private boolean comparePasswords(){
        if(this.getNewPassword().compareTo(this.getConfirm()) == 0)return true;        
        return false;
    }//*************************************************************************    
   
    /** This method compares the original password with the confirmation password
     * to see if they are the sam and returns true if they are and false if not. */
    private boolean isSameAsOriginalPassword(){
        if(!this.comparePasswords())return false;
        if(this.getPassword().compareTo(this.getConfirm())== 0)return true;
        return false;
    }//*************************************************************************    
        
   /** This method clears the wwidTB text. */     
    private boolean clearUserNameInput(){
        this.userNameTB.setText("");
        this.userNameTB.requestFocusInWindow();    
        return true;
    }//*************************************************************************    
    
    /** This method clears the passwordTB and confirmTB text. */
    private boolean clearPassword(){
        this.passwordTB.setText("");
        this.confirmTB.setText("");
        this.newPasswordTB.setText("");
        this.passwordTB.requestFocusInWindow();
        return true;
    }//*************************************************************************    
    
    /** This method sets the class global LOGIN_SUCCESSFUL. */
    private boolean setLoginValidation(boolean yesOrNo){
        this.LOGIN_SUCCESSFUL = yesOrNo;
        return true;       
    }//*************************************************************************    
    
    
    /*
     * This method returns the class variable for the file name of the encrypted
     * file to read.
     */
    private String                          getFileName(){ return this.FILE_NAME; }    
    private String                          getPassword(){return String.copyValueOf(this.passwordTB.getPassword());}
    private String                          getConfirm(){return String.copyValueOf(this.confirmTB.getPassword());}
    private String                          getNewPassword(){return String.copyValueOf(this.newPasswordTB.getPassword());}    
    private String                          getUserName(){return this.userNameTB.getText().trim();}
    
    
    
    private boolean                         getLoginValidation(){return this.LOGIN_SUCCESSFUL;}    
    public EncryptedFile                    getFile(){return this.FILE;}
  
    
    private EncryptedFile                   FILE;
    private String                          FILE_NAME = null;
    private boolean                         LOGIN_SUCCESSFUL = false;
    
    
    
    

      
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JCheckBox changePasswordCB;
    private javax.swing.ButtonGroup changeResetBG;
    private javax.swing.JLabel confirmLabel;
    private javax.swing.JPasswordField confirmTB;
    private javax.swing.JButton exitBut;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JButton logInButton;
    private javax.swing.JButton newPasswordButton;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField newPasswordTB;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTB;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField userNameTB;
    private javax.swing.JLabel wwidLabel;
    // End of variables declaration//GEN-END:variables

    

    
}
